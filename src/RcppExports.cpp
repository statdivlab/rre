// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// log_ps_cpp
NumericVector log_ps_cpp(NumericVector ks, double alpha, double delta);
RcppExport SEXP _rre_log_ps_cpp(SEXP ksSEXP, SEXP alphaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_ps_cpp(ks, alpha, delta));
    return rcpp_result_gen;
END_RCPP
}
// marginal_negative_binomial_cpp
NumericVector marginal_negative_binomial_cpp(NumericVector k, double alpha, double delta);
RcppExport SEXP _rre_marginal_negative_binomial_cpp(SEXP kSEXP, SEXP alphaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(marginal_negative_binomial_cpp(k, alpha, delta));
    return rcpp_result_gen;
END_RCPP
}
// log_marginal_negative_binomial_cpp
NumericVector log_marginal_negative_binomial_cpp(NumericVector k, double alpha, double delta);
RcppExport SEXP _rre_log_marginal_negative_binomial_cpp(SEXP kSEXP, SEXP alphaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_marginal_negative_binomial_cpp(k, alpha, delta));
    return rcpp_result_gen;
END_RCPP
}
// loglike_cond_cpp
double loglike_cond_cpp(double alpha, double delta, int cc, NumericVector ks, NumericVector fs);
RcppExport SEXP _rre_loglike_cond_cpp(SEXP alphaSEXP, SEXP deltaSEXP, SEXP ccSEXP, SEXP ksSEXP, SEXP fsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fs(fsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_cond_cpp(alpha, delta, cc, ks, fs));
    return rcpp_result_gen;
END_RCPP
}
// log_factorial_cpp
double log_factorial_cpp(int x);
RcppExport SEXP _rre_log_factorial_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_factorial_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// loglike_unpenalized_cpp
double loglike_unpenalized_cpp(NumericVector x, int ccc, int cc, NumericVector ks, NumericVector fs);
RcppExport SEXP _rre_loglike_unpenalized_cpp(SEXP xSEXP, SEXP cccSEXP, SEXP ccSEXP, SEXP ksSEXP, SEXP fsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ccc(cccSEXP);
    Rcpp::traits::input_parameter< int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fs(fsSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_unpenalized_cpp(x, ccc, cc, ks, fs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rre_log_ps_cpp", (DL_FUNC) &_rre_log_ps_cpp, 3},
    {"_rre_marginal_negative_binomial_cpp", (DL_FUNC) &_rre_marginal_negative_binomial_cpp, 3},
    {"_rre_log_marginal_negative_binomial_cpp", (DL_FUNC) &_rre_log_marginal_negative_binomial_cpp, 3},
    {"_rre_loglike_cond_cpp", (DL_FUNC) &_rre_loglike_cond_cpp, 5},
    {"_rre_log_factorial_cpp", (DL_FUNC) &_rre_log_factorial_cpp, 1},
    {"_rre_loglike_unpenalized_cpp", (DL_FUNC) &_rre_loglike_unpenalized_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rre(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
